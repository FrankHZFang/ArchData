digraph G { 
"fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer" -> "fg_002: "; 
"fg_003: HandlerContext" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_004: JavaHandlerContext" -> "fg_003: HandlerContext"; 
"fg_004: JavaHandlerContext" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_005: KotlinHandlerContext" -> "fg_004: JavaHandlerContext"; 
"fg_005: KotlinHandlerContext" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_006: LangProcessorRegistration" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_007: FolderCollector" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_008: LeadingNameStripper,UnsolvedSymbolDumper" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_009: MatrixLevelReducer" -> "fg_002: "; 
"fg_010: " -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_011: " -> "fg_010: "; 
"fg_011: " -> "fg_003: HandlerContext"; 
"fg_011: " -> "fg_012: JavaListener"; 
"fg_011: " -> "fg_004: JavaHandlerContext"; 
"fg_011: " -> "fg_006: LangProcessorRegistration"; 
"fg_011: " -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_011: " -> "fg_005: KotlinHandlerContext"; 
"fg_012: JavaListener" -> "fg_010: "; 
"fg_012: JavaListener" -> "fg_003: HandlerContext"; 
"fg_012: JavaListener" -> "fg_004: JavaHandlerContext"; 
"fg_012: JavaListener" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_012: JavaListener" -> "fg_011: "; 
"fg_013: FunctionDependencyGenerator" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_013: FunctionDependencyGenerator" -> "fg_002: "; 
"fg_014: FileDependencyGenerator" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_014: FileDependencyGenerator" -> "fg_002: "; 
"fg_015: " -> "fg_002: "; 
"fg_016: " -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_016: " -> "fg_002: "; 
"fg_016: " -> "fg_015: "; 
"fg_017: DependencyDumper" -> "fg_016: "; 
"fg_017: DependencyDumper" -> "fg_015: "; 
"fg_017: DependencyDumper" -> "fg_002: "; 
"fg_018: WindowsPathFilenameWritter" -> "fg_002: "; 
"fg_019: UnixPathFilenameWritter" -> "fg_002: "; 
"fg_020: DotPathFilenameWritter" -> "fg_002: "; 
"fg_021: DependsCommand" -> "fg_006: LangProcessorRegistration"; 
"fg_021: DependsCommand" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_024: Main" -> "fg_021: DependsCommand"; 
"fg_024: Main" -> "fg_014: FileDependencyGenerator"; 
"fg_024: Main" -> "fg_008: LeadingNameStripper,UnsolvedSymbolDumper"; 
"fg_024: Main" -> "fg_019: UnixPathFilenameWritter"; 
"fg_024: Main" -> "fg_023: ParameterException"; 
"fg_024: Main" -> "fg_006: LangProcessorRegistration"; 
"fg_024: Main" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_024: Main" -> "fg_018: WindowsPathFilenameWritter"; 
"fg_024: Main" -> "fg_002: "; 
"fg_024: Main" -> "fg_007: FolderCollector"; 
"fg_024: Main" -> "fg_017: DependencyDumper"; 
"fg_024: Main" -> "fg_013: FunctionDependencyGenerator"; 
"fg_024: Main" -> "fg_020: DotPathFilenameWritter"; 
"fg_024: Main" -> "fg_022: DV8MappingFileBuilder"; 
"fg_024: Main" -> "fg_009: MatrixLevelReducer"; 
"fg_024: Main" -> "fg_011: "; 
"fg_025: ExpressionUsage" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
"fg_025: ExpressionUsage" -> "fg_005: KotlinHandlerContext"; 
"fg_026: AnonymousBlock" -> "fg_001: NullBuiltInType,FunctionMatcher,ContainerEntity,BuiltInType,AbstractLangProcessor,Inferer"; 
}